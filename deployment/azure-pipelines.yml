trigger:
- main
- develop

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'your-acr-connection'
  imageRepository: 'document-loader'
  containerRegistry: 'yourregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: DeployDev
  displayName: Deploy to Development
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy to Development
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'your-azure-subscription'
              KeyVaultName: 'your-keyvault-name'
              SecretsFilter: '*'
              RunAsPreJob: false
          
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Apps'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create or update container app
                az containerapp update \
                  --name document-loader-dev \
                  --resource-group your-resource-group \
                  --image $(containerRegistry)/$(imageRepository):$(tag) \
                  --set-env-vars \
                    DOCUMENT_LOADER_DB_HOST="$(DB-HOST)" \
                    DOCUMENT_LOADER_DB_PORT="$(DB-PORT)" \
                    DOCUMENT_LOADER_DB_NAME="$(DB-NAME)" \
                    DOCUMENT_LOADER_DB_USER="$(DB-USER)" \
                    DOCUMENT_LOADER_DB_PASSWORD="$(DB-PASSWORD)" \
                    DOCUMENT_LOADER_DB_MIN_POOL_SIZE="10" \
                    DOCUMENT_LOADER_DB_MAX_POOL_SIZE="20"

- stage: DeployProd
  displayName: Deploy to Production
  dependsOn: DeployDev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy to Production
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'your-azure-subscription'
              KeyVaultName: 'your-keyvault-prod'
              SecretsFilter: '*'
              RunAsPreJob: false
          
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Apps'
            inputs:
              azureSubscription: 'your-azure-subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create or update container app
                az containerapp update \
                  --name document-loader-prod \
                  --resource-group your-resource-group-prod \
                  --image $(containerRegistry)/$(imageRepository):$(tag) \
                  --set-env-vars \
                    DOCUMENT_LOADER_DB_HOST="$(DB-HOST-PROD)" \
                    DOCUMENT_LOADER_DB_PORT="$(DB-PORT-PROD)" \
                    DOCUMENT_LOADER_DB_NAME="$(DB-NAME-PROD)" \
                    DOCUMENT_LOADER_DB_USER="$(DB-USER-PROD)" \
                    DOCUMENT_LOADER_DB_PASSWORD="$(DB-PASSWORD-PROD)" \
                    DOCUMENT_LOADER_DB_MIN_POOL_SIZE="10" \
                    DOCUMENT_LOADER_DB_MAX_POOL_SIZE="20"